{"version":3,"sources":["../src/features/withThemeProvider.tsx","../src/features/useGlobalThemes.ts"],"names":["React","useGlobalsManager","useGlobalsPreview","useCallback","useGlobalThemesPreview","themes","selectedTheme","withThemeProvider","Provider","StoryFn","selectedThemeData","name"],"mappings":"AACA,OAAOA,MAA0B,QCDjC,OAAS,cAAcC,MAAyB,yBAChD,OAAS,cAAcC,MAAyB,yBAChD,OAAS,eAAAC,MAAmB,QAiBrB,IAAMC,EAAyB,IAGjC,CACD,GAAM,CAAC,CAAC,OAAAC,EAAQ,cAAAC,CAAa,CAAC,EAAIJ,EAAkB,EAEpD,MAAO,CAAE,OAAAG,EAAQ,cAAAC,CAAc,CACnC,EDlBO,IAAMC,EACDC,GAERC,GAKG,CACH,GAAM,CAAE,OAAAJ,EAAS,CAAC,EAAG,cAAAC,CAAc,EAAIF,EAAuB,EAExDM,EAAoBL,EAAO,KAC/B,CAAC,CAAE,KAAAM,CAAK,IAAM,EAAQL,GAAkBK,IAASL,CACnD,EAEA,OACEN,EAAA,cAACQ,EAAA,CAAS,MAAOE,GAAmB,aAAcD,EAAQ,CAAE,CAEhE","sourcesContent":["import type { FC } from \"react\";\nimport React, { ReactNode } from \"react\";\nimport type {\n  PartialStoryFn as StoryFunction,\n  ReactJSXElement,\n} from \"@storybook/types\";\nimport { useGlobalThemesPreview } from \"./useGlobalThemes\";\n\nexport const withThemeProvider =\n  <TTheme,>(Provider: FC<{ children?: ReactNode; theme?: TTheme }>) =>\n  (\n    StoryFn: StoryFunction<{\n      component: FC;\n      storyResult: ReactJSXElement;\n      canvasElement: unknown;\n    }>\n  ) => {\n    const { themes = [], selectedTheme } = useGlobalThemesPreview();\n\n    const selectedThemeData = themes.find(\n      ({ name }) => Boolean(selectedTheme) && name === selectedTheme\n    );\n\n    return (\n      <Provider theme={selectedThemeData?.themeObject}>{StoryFn()}</Provider>\n    );\n  };\n","import { useGlobals as useGlobalsManager } from \"@storybook/manager-api\";\nimport { useGlobals as useGlobalsPreview } from \"@storybook/preview-api\";\nimport { useCallback } from \"react\";\nimport {ThemeConfigType} from './ThemeConfigType';\n\nexport const useGlobalThemesManager = (): {\n    themes?: ThemeConfigType[];\n    selectedTheme?: string;\n    setSelectedTheme: (nextTheme: string) => void\n} => {\n    const [{themes, selectedTheme}, updateGlobals] = useGlobalsManager();\n\n    const setSelectedTheme = useCallback((nextTheme: string) => {\n        updateGlobals({selectedTheme: nextTheme})\n    }, [updateGlobals])\n\n    return { themes, setSelectedTheme, selectedTheme};\n}\n\nexport const useGlobalThemesPreview = (): {\n    selectedTheme?: string;\n    themes?: ThemeConfigType[]\n} => {\n    const [{themes, selectedTheme}] = useGlobalsPreview();\n\n    return { themes, selectedTheme };\n}\n"]}