{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/components/ThemeSwitcherTool.tsx","../src/components/ThemeList.tsx","../src/features/useGlobalThemes.ts","../src/components/Color.tsx"],"names":["addons","types","ADDON_ID","TOOL_ID","React","memo","useCallback","Icons","IconButton","WithTooltipPure","ListItem","TooltipMessage","useGlobalsManager","useGlobalsPreview","useGlobalThemesManager","themes","selectedTheme","updateGlobals","setSelectedTheme","nextTheme","styled","gradient","Color","colorName","ColorDiv","ThemeList","onSelect","name","color","ThemeSwitcherTool","handleSelect","viewMode"],"mappings":"AAAA,OAAS,UAAAA,EAAQ,SAAAC,MAAa,yBCAvB,IAAMC,EAAW,2BACXC,EAAU,GAAGD,SCD1B,OAAOE,GACL,QAAAC,EACA,eAAAC,MACK,QACP,OACE,SAAAC,EACA,cAAAC,EACA,mBAAAC,MACK,wBCRP,OAAOL,MAAmB,QAC1B,OACE,YAAAM,EAGA,kBAAAC,MACK,wBCNP,OAAS,cAAcC,MAAyB,yBAChD,OAAS,cAAcC,MAAyB,yBAChD,OAAS,eAAAP,MAAmB,QAGrB,IAAMQ,EAAyB,IAIjC,CACD,GAAM,CAAC,CAAC,OAAAC,EAAQ,cAAAC,CAAa,EAAGC,CAAa,EAAIL,EAAkB,EAE7DM,EAAmBZ,EAAaa,GAAsB,CACxDF,EAAc,CAAC,cAAeE,CAAS,CAAC,CAC5C,EAAG,CAACF,CAAa,CAAC,EAElB,MAAO,CAAE,OAAAF,EAAQ,iBAAAG,EAAkB,cAAAF,CAAa,CACpD,ECjBA,OAAOZ,MAAmB,QAC1B,OAAS,UAAAgB,MAAc,qBAEvB,IAAMC,EACJ,+GAEWC,EAAoC,CAAC,CAAE,UAAAC,EAAYF,CAAS,IAChEjB,EAAA,cAACoB,EAAA,CAAS,MAAO,CAAE,WAAYD,CAAU,EAAG,EAGxCC,EAAWJ,EAAO,IAAI,CACjC,MAAO,OACP,OAAQ,OACR,aAAc,MACd,OAAQ,qBACV,CAAC,EFJM,IAAMK,EAGR,CAAC,CAAE,OAAAV,EAAQ,SAAAW,CAAS,IAAM,CAC7B,GAAM,CAAE,cAAAV,CAAc,EAAIF,EAAuB,EAEjD,MADmB,EAAQC,GAAW,MAAM,QAAQA,CAAM,GAAM,EAAQC,EAEtEZ,EAAA,cAAC,WACEW,EAAO,IAAI,CAAC,CAAE,KAAAY,EAAM,MAAAC,CAAM,IAEvBxB,EAAA,cAACM,EAAA,CACC,OAAQM,IAAkBW,EAC1B,QAAS,IAAM,CACbX,IAAkBW,GAAQD,EAASC,CAAI,CACzC,EACA,IAAKA,EACL,MAAOA,EACP,MAAOvB,EAAA,cAACkB,EAAA,CAAM,UAAWM,EAAO,EAClC,CAEH,CACH,EAEAxB,EAAA,cAACO,EAAA,CACC,MAAM,uBACN,KAAK,8DACP,CAEJ,EDlBO,IAAMkB,EAAoBxB,EAAK,UAA2B,CAC/D,GAAM,CAAE,OAAAU,EAAQ,iBAAAG,CAAiB,EAAIJ,EAAuB,EAEtDgB,EAAexB,EAClBqB,GAAiB,CAChBT,EAAiBS,CAAI,CACvB,EACA,CAACZ,CAAM,CACT,EAEA,OACEX,EAAA,cAACK,EAAA,CACC,QAASL,EAAA,cAACqB,EAAA,CAAU,SAAUK,EAAc,OAAQf,EAAQ,GAE5DX,EAAA,cAACI,EAAA,CACC,IAAKL,EACL,MAAM,gBAENC,EAAA,cAACG,EAAA,CAAM,KAAK,SAAS,CACvB,CACF,CAEJ,CAAC,EFjCDP,EAAO,SAASE,EAAU,IAAM,CAE9BF,EAAO,IAAIG,EAAS,CAClB,KAAMF,EAAM,KACZ,MAAO,iBACP,MAAO,CAAC,CAAE,SAAA8B,CAAS,IAAM,CAAC,EAAEA,GAAYA,EAAS,MAAM,gBAAgB,GACvE,OAAQF,CACV,CAAC,CACH,CAAC","sourcesContent":["import { addons, types } from \"@storybook/manager-api\";\nimport { ADDON_ID, TOOL_ID } from \"./constants\";\nimport { ThemeSwitcherTool } from \"./components/ThemeSwitcherTool\";\n\n/**\n * Note: if you want to use JSX in this file, rename it to `manager.tsx`\n * and update the entry prop in tsup.config.ts to use \"src/manager.tsx\",\n */\n\n// Register the addon\naddons.register(ADDON_ID, () => {\n  // Register the tool\n  addons.add(TOOL_ID, {\n    type: types.TOOL,\n    title: \"Theme provider\",\n    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),\n    render: ThemeSwitcherTool,\n  });\n});\n","export const ADDON_ID = \"storybook/theme-provider\";\nexport const TOOL_ID = `${ADDON_ID}/tool`;\nexport const PARAM_KEY = `myAddonParameter`;\n","import React, {\n  memo,\n  useCallback,\n} from \"react\";\nimport {\n  Icons,\n  IconButton,\n  WithTooltipPure,\n} from \"@storybook/components\";\n\nimport { TOOL_ID } from \"../constants\";\nimport {ThemeList} from './ThemeList';\nimport { useGlobalThemesManager } from \"../features/useGlobalThemes\";\n\nexport type ThemeType = {\n  name: string;\n  color?: string;\n  selected?: boolean;\n  themeObject: Record<string, unknown>;\n};\n\nexport const ThemeSwitcherTool = memo(function MyAddonSelector() {\n  const { themes, setSelectedTheme } = useGlobalThemesManager();\n\n  const handleSelect = useCallback(\n    (name: string) => {\n      setSelectedTheme(name)\n    },\n    [themes]\n  );\n\n  return (\n    <WithTooltipPure\n      tooltip={<ThemeList onSelect={handleSelect} themes={themes} />}\n    >\n      <IconButton\n        key={TOOL_ID}\n        title=\"Switch theme\"\n      >\n        <Icons icon=\"mirror\" />\n      </IconButton>\n    </WithTooltipPure>\n  );\n});\n","import React, { FC } from \"react\";\nimport {\n  ListItem,\n  TooltipNote,\n  Span,\n  TooltipMessage,\n} from \"@storybook/components\";\nimport { ThemeConfigType } from \"../features/ThemeConfigType\";\nimport { useGlobalThemesManager } from \"../features/useGlobalThemes\";\nimport { Color } from \"./Color\";\n\nexport const ThemeList: FC<{\n  themes?: ThemeConfigType[];\n  onSelect: (name: string) => void;\n}> = ({ themes, onSelect }) => {\n  const { selectedTheme } = useGlobalThemesManager();\n  const hasConfig = (Boolean(themes) && Array.isArray(themes)) && Boolean(selectedTheme)\n  return hasConfig ? (\n    <div>\n      {themes.map(({ name, color }) => {\n        return (\n          <ListItem\n            active={selectedTheme === name}\n            onClick={() => {\n              selectedTheme !== name && onSelect(name);\n            }}\n            key={name}\n            title={name}\n            right={<Color colorName={color} />}\n          />\n        );\n      })}\n    </div>\n  ) : (\n    <TooltipMessage\n      title=\"Missing theme config\"\n      desc=\"Add themes list and selected theme to .storybook/preview.js\"\n    />\n  );\n};\n","import { useGlobals as useGlobalsManager } from \"@storybook/manager-api\";\nimport { useGlobals as useGlobalsPreview } from \"@storybook/preview-api\";\nimport { useCallback } from \"react\";\nimport {ThemeConfigType} from './ThemeConfigType';\n\nexport const useGlobalThemesManager = (): {\n    themes?: ThemeConfigType[];\n    selectedTheme?: string;\n    setSelectedTheme: (nextTheme: string) => void\n} => {\n    const [{themes, selectedTheme}, updateGlobals] = useGlobalsManager();\n\n    const setSelectedTheme = useCallback((nextTheme: string) => {\n        updateGlobals({selectedTheme: nextTheme})\n    }, [updateGlobals])\n\n    return { themes, setSelectedTheme, selectedTheme};\n}\n\nexport const useGlobalThemesPreview = (): {\n    selectedTheme?: string;\n    themes?: ThemeConfigType[]\n} => {\n    const [{themes, selectedTheme}] = useGlobalsPreview();\n\n    return { themes, selectedTheme };\n}\n","import React, { FC } from \"react\";\nimport { styled } from \"@storybook/theming\";\n\nconst gradient =\n  \"linear-gradient(-45deg, transparent, transparent 45%, pink 45%, pink 55%, transparent 55%, transparent 100%)\";\n\nexport const Color: FC<{ colorName?: string }> = ({ colorName = gradient }) => {\n  return <ColorDiv style={{ background: colorName }} />;\n};\n\nexport const ColorDiv = styled.div({\n  width: \"16px\",\n  height: \"16px\",\n  borderRadius: \"8px\",\n  border: \"1px solid lightgray\",\n});\n"]}