{"version":3,"sources":["../src/features/withThemeProvider.tsx","../src/features/useGlobalThemes.ts","../src/components/MockProvider.tsx","../src/preview.ts"],"names":["React","useGlobalsManager","useGlobalsPreview","useCallback","preview","preview_default"],"mappings":"AACA,OAAOA,MAA0B,QCDjC,OAAS,cAAcC,MAAyB,yBAChD,OAAS,cAAcC,MAAyB,yBAChD,OAAS,eAAAC,MAAmB,QCF5B,OAAOH,MAAyC,QCmBhD,IAAMI,EAqBF,CAAC,EAEEC,EAAQD","sourcesContent":["import type { FC } from \"react\";\nimport React, { ReactNode } from \"react\";\nimport type {\n  PartialStoryFn as StoryFunction,\n  ReactJSXElement,\n} from \"@storybook/types\";\nimport { useGlobalThemesPreview } from \"./useGlobalThemes\";\n\nexport const withThemeProvider =\n  <TTheme,>(Provider: FC<{ children?: ReactNode; theme?: TTheme }>) =>\n  (\n    StoryFn: StoryFunction<{\n      component: FC;\n      storyResult: ReactJSXElement;\n      canvasElement: unknown;\n    }>\n  ) => {\n    const { themes = [], selectedTheme } = useGlobalThemesPreview();\n\n    const selectedThemeData = themes.find(\n      ({ name }) => Boolean(selectedTheme) && name === selectedTheme\n    );\n\n    return (\n      <Provider theme={selectedThemeData?.themeObject}>{StoryFn()}</Provider>\n    );\n  };\n","import { useGlobals as useGlobalsManager } from \"@storybook/manager-api\";\nimport { useGlobals as useGlobalsPreview } from \"@storybook/preview-api\";\nimport { useCallback } from \"react\";\nimport {ThemeConfigType} from './ThemeConfigType';\n\nexport const useGlobalThemesManager = (): {\n    themes?: ThemeConfigType[];\n    selectedTheme?: string;\n    setSelectedTheme: (nextTheme: string) => void\n} => {\n    const [{themes, selectedTheme}, updateGlobals] = useGlobalsManager();\n\n    const setSelectedTheme = useCallback((nextTheme: string) => {\n        updateGlobals({selectedTheme: nextTheme})\n    }, [updateGlobals])\n\n    return { themes, setSelectedTheme, selectedTheme};\n}\n\nexport const useGlobalThemesPreview = (): {\n    selectedTheme?: string;\n    themes?: ThemeConfigType[]\n} => {\n    const [{themes, selectedTheme}] = useGlobalsPreview();\n\n    return { themes, selectedTheme };\n}\n","import React, { FC, ReactNode, useEffect } from \"react\";\n\nexport const MockProvider: FC<{ children?: ReactNode; theme?: any }> = ({\n  children,\n  theme = {},\n}) => {\n  // useEffect(() => {\n  //   console.log(\"theme updated\", theme);\n  // }, [theme]);\n  return <div className={theme.name}>{children}</div>;\n};\n","/**\n * A decorator is a way to wrap a story in extra “rendering” functionality. Many addons define decorators\n * in order to augment stories:\n * - with extra rendering\n * - gather details about how a story is rendered\n *\n * When writing stories, decorators are typically used to wrap stories with extra markup or context mocking.\n *\n * https://storybook.js.org/docs/react/writing-stories/decorators\n */\nimport type { Renderer, ProjectAnnotations } from \"@storybook/types\";\nimport { withThemeProvider } from \"./features/withThemeProvider\";\nimport {MockProvider} from './components/MockProvider';\n\n/**\n * Note: if you want to use JSX in this file, rename it to `preview.tsx`\n * and update the entry prop in tsup.config.ts to use \"src/preview.tsx\",\n */\n\nconst preview: ProjectAnnotations<Renderer> = process.env.NODE_ENV === 'development' ? {\n  decorators: [withThemeProvider(MockProvider)],\n  globals: {\n    selectedTheme: 'foo',\n    themes: [\n      {\n        name: 'foo',\n        color: '#1ea7fd',\n        themeObject: {\n          name: 'foo'\n        }\n      },\n      {\n        name: 'bar',\n        color: '#abfd1e',\n        themeObject: {\n          name: 'bar'\n        }\n      }\n    ]\n  },\n} : {};\n\nexport default preview;\n"]}